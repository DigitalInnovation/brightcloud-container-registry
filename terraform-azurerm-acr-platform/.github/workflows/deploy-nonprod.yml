name: Deploy Non-Prod ACR Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'environments/nonprod/**'
      - 'modules/**'
      - '.github/workflows/deploy-nonprod.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: '1.6.0'
  WORKING_DIR: './environments/nonprod'

jobs:
  terraform:
    name: Terraform Non-Prod
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    environment: nonprod
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=acr-nonprod.tfstate"

      - name: Terraform Validate
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -out=tfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: Add Plan Comment to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan - Non-Prod')
            );
            
            const planResult = '${{ steps.plan.outcome }}';
            const exitCode = '${{ steps.plan.outputs.exitcode }}';
            const planOutput = `${{ steps.plan.outputs.stdout }}`;
            const workflowName = '${{ github.workflow }}';
            const eventName = '${{ github.event_name }}';
            
            const output = `## üèóÔ∏è Terraform Plan - Non-Prod ACR
            
            **Plan Result**: ${planResult}
            **Exit Code**: ${exitCode}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`
            ${planOutput}
            \`\`\`
            
            </details>
            
            *Workflow: \`${workflowName}\`*
            *Action: \`${eventName}\`*
            `;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Terraform Apply
        if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.action == 'apply') }}
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.action == 'destroy' }}
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: |
          terraform plan -destroy -var-file="terraform.tfvars" -out=destroy-plan
          terraform apply -auto-approve destroy-plan

      - name: Upload Terraform Plan
        if: ${{ steps.plan.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: nonprod-tfplan
          path: ${{ env.WORKING_DIR }}/tfplan
          retention-days: 5

      - name: Post-deployment validation
        if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.action == 'apply') }}
        working-directory: ${{ env.WORKING_DIR }}
        shell: bash
        run: |
          # Get registry details
          REGISTRY_NAME=$(terraform output -raw registry_name)
          REGISTRY_URL=$(terraform output -raw registry_url)
          
          {
            echo "REGISTRY_NAME=${REGISTRY_NAME}"
            echo "REGISTRY_URL=${REGISTRY_URL}"
          } >> "$GITHUB_ENV"
          
          echo "‚úÖ Non-prod ACR deployed successfully"
          echo "Registry Name: $REGISTRY_NAME"
          echo "Registry URL: $REGISTRY_URL"
          
          # Test registry connectivity
          az acr login --name "$REGISTRY_NAME"
          echo "‚úÖ Registry login successful"
          
          # Verify ABAC is enabled
          ABAC_STATUS=$(az acr show --name "$REGISTRY_NAME" --query "policies.repositoryScopedPermissions.status" -o tsv)
          if [ "$ABAC_STATUS" = "enabled" ]; then
            echo "‚úÖ ABAC repository-scoped permissions enabled"
          else
            echo "‚ùå ABAC repository-scoped permissions not enabled"
            exit 1
          fi