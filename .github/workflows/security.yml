name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  security-events: write
  contents: read
  pull-requests: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      contents: read
    if: ${{ github.event_name != 'schedule' || github.ref == 'refs/heads/main' }}
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        if: ${{ matrix.language == 'javascript' || matrix.language == 'typescript' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: acr-image-promotion-action/package-lock.json

      - name: Install dependencies
        if: ${{ matrix.language == 'javascript' || matrix.language == 'typescript' }}
        working-directory: acr-image-promotion-action
        shell: bash
        run: npm ci

      - name: Build TypeScript
        if: ${{ matrix.language == 'typescript' }}
        working-directory: acr-image-promotion-action
        shell: bash
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/nodejs
            p/terraform
            p/docker
            p/kubernetes
            p/github-actions
          generateSarif: "1"

      - name: Upload SARIF file
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: acr-image-promotion-action/package-lock.json

      - name: Install dependencies
        working-directory: acr-image-promotion-action
        shell: bash
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=acr-image-promotion-action/package.json
          
      - name: Upload Snyk result to GitHub Code Scanning
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Run npm audit
        working-directory: acr-image-promotion-action
        shell: bash
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload npm audit results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: acr-image-promotion-action/npm-audit.json
          retention-days: 30
          if-no-files-found: error

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: terraform-azurerm-acr-platform/test/go.sum

      - name: Install Go dependencies
        working-directory: terraform-azurerm-acr-platform/test
        shell: bash
        run: go mod download

      - name: Run Go vulnerability scan
        working-directory: terraform-azurerm-acr-platform/test
        shell: bash
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... | tee govulncheck.txt || true

      - name: Upload Go vulnerability results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: go-vulnerability-results
          path: terraform-azurerm-acr-platform/test/govulncheck.txt
          retention-days: 30
          if-no-files-found: error

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}

  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform-azurerm-acr-platform
          format: sarif
          soft_fail: true
          additional_args: --config-file=../.tfsec/config.yml

      - name: Upload tfsec SARIF
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform-azurerm-acr-platform
          config_file: .checkov.yaml
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov SARIF
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_dir: 'terraform-azurerm-acr-platform'
          policy_type: 'azure'
          only_warn: true
          sarif_upload: true

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: backstage-acr-template/skeleton/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: error

      - name: Upload Hadolint SARIF
        if: ${{ !cancelled() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Check Security Documentation
        shell: bash
        run: |
          required_docs=(
            "SECURITY.md"
            "terraform-azurerm-acr-platform/docs/security-guide.md"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "::error::Missing required security documentation: $doc"
              exit 1
            fi
          done

      - name: Validate GitHub Actions Security
        shell: bash
        run: |
          # Check for pinned action versions
          workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml")
          
          for file in $workflow_files; do
            # Look for uses: actions without @version
            if grep -q "uses:.*@main\|uses:.*@master" "$file"; then
              echo "::warning::Unpinned action versions found in $file"
            fi
            
            # Check for hardcoded secrets
            if grep -qi "password\|secret\|token\|key" "$file" | grep -v "\${{"; then
              echo "::error::Potential hardcoded secrets in $file"
              exit 1
            fi
          done

      - name: GDPR Compliance Check
        shell: bash
        run: |
          # Check for data processing documentation
          if [ ! -f "PRIVACY.md" ] && [ ! -f "docs/privacy.md" ]; then
            echo "::warning::No privacy/GDPR documentation found"
          fi
          
          # Check for data retention policies in code
          if ! grep -r "retention.*policy\|data.*retention" terraform-azurerm-acr-platform/ --include="*.tf" > /dev/null; then
            echo "::error::No data retention policies found in Terraform configurations"
            exit 1
          fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pull-requests: write
      contents: read
    needs: [codeql, semgrep, trivy, dependency-scan, secrets-scan, terraform-security, docker-security, compliance-check]
    if: ${{ !cancelled() }}
    
    steps:
      - name: Generate Security Summary
        shell: bash
        env:
          CODEQL_RESULT: ${{ needs.codeql.result }}
          SEMGREP_RESULT: ${{ needs.semgrep.result }}
          TRIVY_RESULT: ${{ needs.trivy.result }}
          DEPENDENCY_RESULT: ${{ needs.dependency-scan.result }}
          SECRETS_RESULT: ${{ needs.secrets-scan.result }}
          TERRAFORM_RESULT: ${{ needs.terraform-security.result }}
          DOCKER_RESULT: ${{ needs.docker-security.result }}
          COMPLIANCE_RESULT: ${{ needs.compliance-check.result }}
        run: |
          echo "## Security Scan Summary" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          
          # CodeQL
          if [ "$CODEQL_RESULT" == "success" ]; then
            echo "✅ CodeQL analysis passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ CodeQL analysis failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Semgrep
          if [ "$SEMGREP_RESULT" == "success" ]; then
            echo "✅ Semgrep security scan passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Semgrep security scan failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Trivy
          if [ "$TRIVY_RESULT" == "success" ]; then
            echo "✅ Trivy vulnerability scan passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Trivy vulnerability scan failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Dependency scan
          if [ "$DEPENDENCY_RESULT" == "success" ]; then
            echo "✅ Dependency security scan passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Dependency security scan failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Secrets scan
          if [ "$SECRETS_RESULT" == "success" ]; then
            echo "✅ Secrets detection passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Secrets detection failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Terraform security
          if [ "$TERRAFORM_RESULT" == "success" ]; then
            echo "✅ Terraform security scan passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Terraform security scan failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Docker security
          if [ "$DOCKER_RESULT" == "success" ]; then
            echo "✅ Docker security scan passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Docker security scan failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          # Compliance check
          if [ "$COMPLIANCE_RESULT" == "success" ]; then
            echo "✅ Compliance validation passed" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "❌ Compliance validation failed" >> "${GITHUB_STEP_SUMMARY}"
          fi
          
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Security Reports" >> "${GITHUB_STEP_SUMMARY}"
          echo "- All security findings are available in the Security tab" >> "${GITHUB_STEP_SUMMARY}"
          echo "- SARIF reports have been uploaded for detailed analysis" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Dependency scan results are available in artifacts" >> "${GITHUB_STEP_SUMMARY}"

      - name: Comment Security Status on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          CODEQL_RESULT: ${{ needs.codeql.result }}
          SEMGREP_RESULT: ${{ needs.semgrep.result }}
          TRIVY_RESULT: ${{ needs.trivy.result }}
          DEPENDENCY_RESULT: ${{ needs.dependency-scan.result }}
          SECRETS_RESULT: ${{ needs.secrets-scan.result }}
          TERRAFORM_RESULT: ${{ needs.terraform-security.result }}
          DOCKER_RESULT: ${{ needs.docker-security.result }}
          COMPLIANCE_RESULT: ${{ needs.compliance-check.result }}
        with:
          script: |
            const failed_jobs = [];
            const jobs = {
              'CodeQL': process.env.CODEQL_RESULT,
              'Semgrep': process.env.SEMGREP_RESULT,
              'Trivy': process.env.TRIVY_RESULT,
              'Dependency Scan': process.env.DEPENDENCY_RESULT,
              'Secrets Scan': process.env.SECRETS_RESULT,
              'Terraform Security': process.env.TERRAFORM_RESULT,
              'Docker Security': process.env.DOCKER_RESULT,
              'Compliance Check': process.env.COMPLIANCE_RESULT
            };
            
            Object.entries(jobs).forEach(([job, result]) => {
              if (result !== 'success') {
                failed_jobs.push(job);
              }
            });
            
            const success_count = Object.values(jobs).filter(r => r === 'success').length;
            const total_count = Object.keys(jobs).length;
            
            let comment = `## 🔒 Security Scan Results\n\n`;
            comment += `**Overall Status**: ${success_count}/${total_count} checks passed\n\n`;
            
            if (failed_jobs.length === 0) {
              comment += `✅ All security checks passed! This PR is ready for review.\n\n`;
            } else {
              comment += `❌ Some security checks failed. Please review:\n\n`;
              failed_jobs.forEach(job => {
                comment += `- ${job}\n`;
              });
              comment += `\nPlease check the Security tab for detailed findings.\n\n`;
            }
            
            comment += `### Security Dashboard\n`;
            comment += `Visit the [Security tab](${context.payload.repository.html_url}/security) for detailed security reports.\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check Security Gate
        shell: bash
        env:
          CODEQL_RESULT: ${{ needs.codeql.result }}
          SEMGREP_RESULT: ${{ needs.semgrep.result }}
          TRIVY_RESULT: ${{ needs.trivy.result }}
          DEPENDENCY_RESULT: ${{ needs.dependency-scan.result }}
          SECRETS_RESULT: ${{ needs.secrets-scan.result }}
          TERRAFORM_RESULT: ${{ needs.terraform-security.result }}
          DOCKER_RESULT: ${{ needs.docker-security.result }}
          COMPLIANCE_RESULT: ${{ needs.compliance-check.result }}
        run: |
          failed_jobs=0
          
          if [ "$CODEQL_RESULT" != "success" ]; then failed_jobs=$((failed_jobs + 1)); fi
          if [ "$SECRETS_RESULT" != "success" ]; then failed_jobs=$((failed_jobs + 1)); fi
          if [ "$COMPLIANCE_RESULT" != "success" ]; then failed_jobs=$((failed_jobs + 1)); fi
          
          # Critical security checks that must pass
          if [ $failed_jobs -gt 0 ]; then
            echo "::error::Critical security checks failed. Review required before merge."
            exit 1
          fi
          
          # Warning for other failed checks but don't block
          other_failed=0
          if [ "$SEMGREP_RESULT" != "success" ]; then other_failed=$((other_failed + 1)); fi
          if [ "$TRIVY_RESULT" != "success" ]; then other_failed=$((other_failed + 1)); fi
          if [ "$DEPENDENCY_RESULT" != "success" ]; then other_failed=$((other_failed + 1)); fi
          if [ "$TERRAFORM_RESULT" != "success" ]; then other_failed=$((other_failed + 1)); fi
          if [ "$DOCKER_RESULT" != "success" ]; then other_failed=$((other_failed + 1)); fi
          
          if [ $other_failed -gt 0 ]; then
            echo "::warning::$other_failed non-critical security checks failed. Please review findings."
          fi